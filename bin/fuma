#!/usr/bin/env python

"""[License: GNU General Public License v3 (GPLv3)]
 
 This file is part of FuMa.
 
 FuMa is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 FuMa is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.

 Documentation as defined by:
 <http://epydoc.sourceforge.net/manual-fields.html#fields-synonyms>
"""

import sys,os,os.path,argparse,textwrap,datetime


import fuma
from fuma.ParseBED import ParseBED
from fuma.OverlapComplex import OverlapComplex

from fuma.Readers import *

from fuma.CompareFusionsBySpanningGenes import CompareFusionsBySpanningGenes



if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	
	parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,epilog="For more info please visit:\n<https://github.com/yhoogstrate/fuma>")
	parser.add_argument('-V','--version', action='version', version=textwrap.dedent("%(prog)s "+fuma.__version__+"\n\nCopyright (C) 2013-"+str(datetime.datetime.now().year)+" Youri Hoogstrate.\n\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"))
	
	parser.add_argument("-a","--add-gene-annotation",help="annotation_alias:filename  * file in BED format",nargs="*")
	
	parser.add_argument("-s","--add-sample",help="sample_alias:type:filename",nargs="+",required=True)
	parser.add_argument("-l","--link-sample-to-annotation",help="sample_alias:annotation_alias",nargs="*")
	
	parser.add_argument("-f","--format",default="list",choices=["summary","list","extensive"],help="Output-format")
	
	parser.add_argument("-o","--output",help="output filename; '-' for stdout",default="overlap/")
	
	args = parser.parse_args()
	
	gene_annotations = {}
	if(args.add_gene_annotation):
		for gene_annotation in args.add_gene_annotation:
			gene_annotation = gene_annotation.split(":",1)
			gene_annotations[gene_annotation[0]] = ParseBED(gene_annotation[1],gene_annotation[0])
	
	samples = {}
	sample_names = []
	for sample in args.add_sample:
		sample_name, input_format, sample_filename = sample.split(":",2)
		
		if(sample_name in sample_names):
			raise Exception("non-unique sample alias: "+sample_name)
		elif(sample_name.find("~") > -1):
			raise Exception("a sample alias may not include the '~' char: "+sample_name)
		else:
			sample_names.append(sample_name)
			input_format = input_format.lower().replace("-","").replace("_","").replace(" ","")
			
			# Complete Genomics
			if(input_format in ["cg","completegenomics"]):
				try:
					samples[sample_name] = ReadCGhighConfidenceJunctionsBeta(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# Chimerascan BEDPE
			elif(input_format == "chimerascan"):
				try:
					samples[sample_name] = ReadChimeraScanAbsoluteBEDPE(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# Defuse
			elif(input_format == "defuse"):
				try:
					samples[sample_name] = ReadDefuse(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# TopHat Fusion
			elif(input_format == "tophatfusionpostpotentialfusion"):
				try:
					samples[sample_name] = ReadTophatFusionPostPotentialFusion(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			elif(input_format == "tophatfusionpostresult"):
				try:
					samples[sample_name] = ReadTophatFusionPostResult(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			elif(input_format == "tophatfusionpre"):
				try:
					samples[sample_name] = ReadTophatFusionPre(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# FusionCatcher
			elif(input_format in ["fusioncatcherfinal","fusioncatcherfinallist","fusioncatcherfinallistcandidatefusiongenes"]):
				try:
					samples[sample_name] = ReadFusionCatcherFinalList(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# FusionMap
			elif(input_format in ["fusionmap"]):
				try:
					samples[sample_name] = ReadFusionMap(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# 1-2-3-SV
			elif(input_format in ["123sv"]):
				try:
					samples[sample_name] = Read123SVDeNovo(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# RNA-STAR
			elif(input_format == "rnastarchimeric"):
				try:
					samples[sample_name] = ReadRNASTARChimeric(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# Oncofuse
			elif(input_format == "oncofuse"):
				try:
					samples[sample_name] = ReadOncofuse(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# Trinity / GMAP
			elif(input_format == "trinitygmap"):
				try:
					samples[sample_name] = ReadTrinityGMAP(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			# --- 
			elif(input_format in ["illuminahiseq","illuminahiseqvcf"]):
				try:
					samples[sample_name] = ReadIlluminaHiSeqVCF(sample_filename,sample_name)
				except:
					raise Exception("Sample '"+sample_name+ "' could not be parsed as filetype: "+input_format)
			
			else:
				raise Exception("unsupported sample type: "+input_format)
	
	if(args.link_sample_to_annotation):
		for link in args.link_sample_to_annotation:
			sample_name, reference_name = link.split(":",1)
			
			if(not samples.has_key(sample_name)):
				raise Exception("unknown sample: "+sample_name)
			
			if(not gene_annotations.has_key(reference_name)):
				raise Exception("unknown annotation: "+reference_name)
			
			samples[sample_name].annotate_genes(gene_annotations[reference_name])
			samples[sample_name].remove_duplicates("by-gene-names")
	
	o = OverlapComplex()
	
	for sample_name in sample_names:
		o.add_experiment(samples[sample_name])
	
	if(args.format == "summary"):
		o.overlay_fusions(True,False,"summary")
		o.export_summary(args.output)
	else:
		if(args.output == "-"):
			o.overlay_fusions(False,sys.stdout,args.format)# Exports content of the datasets
		else:
			fh = open(args.output,"w")
			o.overlay_fusions(True,fh,args.format)# Exports content of the datasets << check if sparse can be enabled?
			fh.close()
